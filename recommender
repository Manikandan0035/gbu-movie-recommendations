import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

class MovieRecommender:
    def __init__(self, data_path):
        self.df = pd.read_csv(data_path)
        self.df['overview'] = self.df['overview'].fillna('')
        self.tfidf = TfidfVectorizer(stop_words='english')
        self.tfidf_matrix = self.tfidf.fit_transform(self.df['overview'])
        self.cosine_sim = linear_kernel(self.tfidf_matrix, self.tfidf_matrix)
    
    def recommend(self, title, top_n=10):
        # Get the index of the movie that matches the title
        idx = self.df[self.df['title'] == title].index[0]
        
        # Get the pairwise similarity scores
        sim_scores = list(enumerate(self.cosine_sim[idx]))
        
        # Sort the movies based on the similarity scores
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        
        # Get the scores of the top_n most similar movies
        sim_scores = sim_scores[1:top_n+1]
        
        # Get the movie indices
        movie_indices = [i[0] for i in sim_scores]
        
        # Return the top_n most similar movies
        return self.df.iloc[movie_indices][['title', 'vote_average', 'overview']].to_dict('records')
    
    def search_movies(self, query, top_n=5):
        # Simple search that matches the query against movie titles
        results = self.df[self.df['title'].str.contains(query, case=False)][['title']]
        return results.head(top_n).to_dict('records')
